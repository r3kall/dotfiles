#!/usr/bin/env bash
# network-menu — manage Wi-Fi / VPN / Ethernet via rofi + nmcli
# deps: rofi, nmcli ; optional: notify-send
set -euo pipefail
LC_ALL=C

# --- Config ------------------------------------------------------------------
ROFI_BIN="${ROFI_BIN:-rofi}"
NMCLI_BIN="${NMCLI_BIN:-nmcli}"
PROMPT_ICON="${PROMPT_ICON:- }"
ROFI_ARGS="${ROFI_ARGS:--normal-window -dmenu -config $XDG_CONFIG_HOME/rofi/networkmenu.rasi}"

# --- Utils -------------------------------------------------------------------
have() { command -v "$1" >/dev/null 2>&1; }
have "$ROFI_BIN" || { echo "rofi not found" >&2; exit 1; }
have "$NMCLI_BIN" || { echo "nmcli not found" >&2; exit 1; }

notify() {
  if command -v notify-send >/dev/null 2>&1; then
    notify-send "network-menu" "$*"
  else
    printf '[network-menu] %s\n' "$*" >&2
  fi
}

rofi_menu() {
  local prompt="$1"
  local -a _argv
  # shellcheck disable=SC2206
  _argv=($ROFI_ARGS)
  "$ROFI_BIN" "${_argv[@]}" -i -p "$PROMPT_ICON$prompt"
}

nmcli_try() { # nmcli_try <timeout> <nmcli args...>
  local t="$1"; shift
  local out
  if ! out="$("$NMCLI_BIN" -w "$t" "$@" 2>&1)"; then
    notify "nmcli error: $out"
    return 1
  fi
  printf '%s\n' "$out"
}

wifi_device() { "$NMCLI_BIN" -t -f DEVICE,TYPE device status | awk -F: '$2=="wifi"{print $1; exit}'; }
wifi_enabled() { "$NMCLI_BIN" radio wifi | grep -qi enabled; }

is_wifi_type() {
  case "${1:-}" in
    802-11-wireless|wifi) return 0 ;;
    *) return 1 ;;
  esac
}

# --- Data --------------------------------------------------------------------
wifi_scan() {
  # ACTIVE\tSSID\tBSSID\tSIGNAL\tSECURITY\tCHAN
  local dev; dev="$(wifi_device)"; [ -n "${dev:-}" ] || { notify "No Wi-Fi device"; return 1; }
  "$NMCLI_BIN" device wifi rescan ifname "$dev" >/dev/null 2>&1 || true
  "$NMCLI_BIN" -m multiline -f ACTIVE,IN-USE,SSID,BSSID,SIGNAL,SECURITY,CHAN device wifi list ifname "$dev" 2>/dev/null \
  | awk -v RS='' '
      function trim(s){ gsub(/^[ \t]+|[ \t]+$/,"",s); return s }
      {
        active="no"; ssid=""; bssid=""; signal=""; sec=""; chan="";
        n=split($0,L,/\n/)
        for(i=1;i<=n;i++){
          line=L[i]
          if(match(line,/^ACTIVE[[:space:]]*:[[:space:]]*(.*)$/,m)) active=trim(m[1])
          else if(match(line,/^IN-USE[[:space:]]*:[[:space:]]*(.*)$/,m) && trim(m[1])=="*") active="yes"
          else if(match(line,/^SSID[[:space:]]*:[[:space:]]*(.*)$/,m)) ssid=trim(m[1])
          else if(match(line,/^BSSID[[:space:]]*:[[:space:]]*(.*)$/,m)) bssid=trim(m[1])
          else if(match(line,/^SIGNAL[[:space:]]*:[[:space:]]*([0-9]+)%?$/,m)) signal=trim(m[1])
          else if(match(line,/^SECURITY[[:space:]]*:[[:space:]]*(.*)$/,m)) sec=trim(m[1])
          else if(match(line,/^CHAN[[:space:]]*:[[:space:]]*(.*)$/,m)) chan=trim(m[1])
        }
        printf "%s\t%s\t%s\t%s\t%s\t%s\n", active, ssid, bssid, signal, sec, chan
      }'
}

vpn_list() {
  # NAME\tSTATE
  "$NMCLI_BIN" -t -f NAME,TYPE,DEVICE connection show | awk -F: '$2=="vpn"{print $1"\t"($3==""?"down":"up")}'
}

wired_status() {
  # DEVICE\tTYPE\tSTATE\tCONNECTION
  "$NMCLI_BIN" -t -f DEVICE,TYPE,STATE,CONNECTION device status | awk -F: '$2=="ethernet"{print $1"\t"$2"\t"$3"\t"$4}'
}

known_connections() {
  # NAME\tTYPE\tUUID\tSTATE
  "$NMCLI_BIN" -t -f NAME,TYPE,UUID,DEVICE connection show \
  | awk -F: '{state=($4==""?"down":"up"); printf "%s\t%s\t%s\t%s\n",$1,$2,$3,state}'
}

conn_info_from_uuid() {
  # echo "NAME<TAB>TYPE<TAB>STATE"
  local uuid="$1"
  "$NMCLI_BIN" -t -f NAME,TYPE,UUID,DEVICE connection show \
    | awk -F: -v u="$uuid" '$3==u{print $1"\t"$2"\t"($4==""?"down":"up"); exit}'
}

ssid_from_bssid() {
  local bssid="$1"
  wifi_scan | awk -F'\t' -v b="$bssid" '$3==b{print $2; exit}'
}

prefer_saved_conn_by_ssid() {
  local ssid="$1"
  "$NMCLI_BIN" -t -f NAME,TYPE connection show | awk -F: -v s="$ssid" '$2=="wifi" && $1==s{print $1; exit}'
}

# --- UI helpers --------------------------------------------------------------
show_menu_with_header() { # title fmt COL1 COL2 ... ; rows on stdin
  local title="$1" fmt="$2"; shift 2 || true
  local header; header="$(printf "$fmt\n" "$@")"
  { printf '%s\n' "$header"; cat; } | rofi_menu "$title"
}

# --- Actions -----------------------------------------------------------------
wifi_connect_bssid() {
  local bssid="$1"
  local dev; dev="$(wifi_device)"; [ -n "${dev:-}" ] || { notify "Wi-Fi error: no device"; return 0; }
  local ssid; ssid="$(ssid_from_bssid "$bssid")"
  local saved; saved="$(prefer_saved_conn_by_ssid "$ssid")"
  if [ -n "$saved" ]; then
    nmcli_try 15 connection up id "$saved" >/dev/null || return 0
    notify "Connected to $saved"; exit 0
  fi
  if ! nmcli_try 15 device wifi connect "$bssid" ifname "$dev" >/dev/null; then
    local pass
    pass="$("$ROFI_BIN" "$ROFI_ARGS" -password -p "${PROMPT_ICON}Wi-Fi password" <<<"")" || { notify "Wi-Fi connect canceled"; return 0; }
    [ -z "$pass" ] && { notify "Wi-Fi: empty password"; return 0; }
    nmcli_try 15 device wifi connect "$bssid" ifname "$dev" password "$pass" >/dev/null || return 0
  fi
  notify "Connected to ${ssid:-Wi-Fi}"; exit 0
}

vpn_up()   { local name="$1"; nmcli_try 15 connection up   id "$name" >/dev/null || return 0; notify "VPN up: $name";   exit 0; }
vpn_down() { local name="$1"; nmcli_try 10 connection down id "$name" >/dev/null || return 0; notify "VPN down: $name"; exit 0; }

wired_toggle_device() {
  local dev="$1" state="$2"
  if [[ "$state" == "connected" ]]; then
    nmcli_try 5 device disconnect "$dev" >/dev/null || return 0
    notify "Ethernet disconnected: $dev"; exit 0
  else
    nmcli_try 8 device connect "$dev" >/dev/null || return 0
    notify "Ethernet connected: $dev"; exit 0
  fi
}

known_toggle_uuid() {
  local uuid="$1"
  local info name type state
  info="$(conn_info_from_uuid "$uuid")" || return 0
  name="$(cut -f1 <<<"$info")"; type="$(cut -f2 <<<"$info")"; state="$(cut -f3 <<<"$info")"
  if [[ "$state" == "up" ]]; then
    nmcli_try 10 connection down uuid "$uuid" >/dev/null || return 0
    notify "Down: $name"; exit 0
  else
    nmcli_try 15 connection up uuid "$uuid"   >/dev/null || return 0
    notify "Up: $name"; exit 0
  fi
}

known_delete_uuid() {
  local uuid="$1"
  local name; name="$( "$NMCLI_BIN" -t -f NAME connection show uuid "$uuid" 2>/dev/null )"
  local ans
  ans="$(printf "No\nYes\n" | rofi_menu "Delete '$name'?")" || return 0
  [[ "$ans" == "Yes" ]] || return 0
  nmcli_try 5 connection delete uuid "$uuid" >/dev/null || return 0
  notify "Deleted: ${name:-$uuid}"; exit 0
}

known_set_priority_uuid() {
  local uuid="$1"
  local info name type
  info="$(conn_info_from_uuid "$uuid")" || return 0
  name="$(cut -f1 <<<"$info")"
  type="$(cut -f2 <<<"$info")"  
  if ! is_wifi_type "$type"; then
    notify "Priority is for Wi-Fi only"; return 0
  fi

  local prio
  prio="$("$ROFI_BIN" "$ROFI_ARGS" -p "${PROMPT_ICON}Priority (-999..999)" <<<"0")" || return 0
  prio="$(printf '%s' "$prio" | sed -E 's/^[[:space:]]+|[[:space:]]+$//g; s/^(-?)[^0-9]*([0-9]+).*/\1\2/')"
  [[ "$prio" =~ ^-?[0-9]+$ ]] || { notify "Invalid priority"; return 0; }
  uuid="$(printf '%s' "$uuid" | tr -d ' \t\r\n')"
  local out
  if ! out="$("$NMCLI_BIN" -w 5 connection modify uuid "$uuid" connection.autoconnect-priority "$prio" 2>&1)"; then
    # Fallback path avoids 'show uuid' entirely
    if ! out="$("$NMCLI_BIN" -w 5 connection modify id "$name" connection.autoconnect-priority "$prio" 2>&1)"; then
      notify "Set priority failed for $name: $out"
      return 0
    fi
  fi
  notify "Priority $prio set for $name"
  exit 0
}

# --- Menus -------------------------------------------------------------------
menu_wifi() {
  local wifi_fmt="%s  %-32s  %3s%%  ch%-4s  %-12s  [%s]"
  local rows sel
  rows="$(wifi_scan | awk -F'\t' -v fmt="$wifi_fmt" '{
    printf(fmt"\n", ($1=="yes")?"*":" ", ($2==""?"<hidden>":$2), $4, $6, $5, $3)
  }')"
  [ -n "$rows" ] || rows="$(printf "$wifi_fmt\n" " " "(no networks found)" "" "" "" "")"
  sel="$(show_menu_with_header "Wi-Fi: pick" "$wifi_fmt" " " "SSID" "SIG" "CHAN" "SECURITY" "BSSID" <<<"$rows")" || return 0
  [ -z "$sel" ] && return 0
  [[ "$sel" =~ \[([0-9A-Fa-f:]{17})\] ]] || return 0
  wifi_connect_bssid "${BASH_REMATCH[1]}"
}

menu_vpn() {
  local vpn_fmt="%-40s  [%s]"
  local rows sel
  rows="$(vpn_list | awk -F'\t' -v fmt="$vpn_fmt" '{printf(fmt"\n",$1,$2)}')"
  [ -n "$rows" ] || rows="$(printf "$vpn_fmt\n" "(no vpn connections saved)" "")"
  sel="$(show_menu_with_header "VPN: up/down" "$vpn_fmt" "NAME" "STATE" <<<"$rows")" || return 0
  [ -z "$sel" ] && return 0
  [[ "$sel" == "(no vpn connections saved)  []" ]] && return 0
  local name="${sel%%  *}"
  if [[ "$sel" =~ \[up\] ]]; then vpn_down "$name"; else vpn_up "$name"; fi
  return 0
}

menu_wired() {
  local wired_fmt="%-15s  %-8s  %-10s  %s"
  local rows sel
  rows="$(wired_status | awk -F'\t' -v fmt="$wired_fmt" '{printf(fmt"\n",$1,$2,$3,$4)}')"
  [ -n "$rows" ] || rows="$(printf "$wired_fmt\n" "(no ethernet devices)" "" "" "")"
  sel="$(show_menu_with_header "Wired: toggle" "$wired_fmt" "DEVICE" "TYPE" "STATE" "CONNECTION" <<<"$rows")" || return 0
  [ -z "$sel" ] && return 0
  [[ "$sel" == "(no ethernet devices)                " ]] && return 0
  local dev state
  dev="$(awk '{print $1}' <<<"$sel")"
  state="$(awk '{print $3}' <<<"$sel")"
  [ -n "$dev" ] || return 0
  wired_toggle_device "$dev" "$state"
}

menu_known() {
  local known_fmt="%-28s  %-16s  %-5s  [%s]"  # NAME TYPE STATE [UUID]
  local header rows sel
  rows="$(known_connections | awk -F'\t' -v fmt="$known_fmt" '{printf(fmt"\n",$1,$2,$4,$3)}')"
  [ -n "$rows" ] || rows="$(printf "$known_fmt\n" "(no saved connections)" "" "" "")"
  sel="$(show_menu_with_header "Known connections" "$known_fmt" "NAME" "TYPE" "STATE" "UUID" <<<"$rows")" || return 0
  [ -z "$sel" ] && return 0
  [[ "$sel" == "(no saved connections)               " ]] && return 0

  header="$(printf "$known_fmt\n" "NAME" "TYPE" "STATE" "UUID")"
  [[ "$sel" == "$header" ]] && return 0
  [[ "$sel" =~ \[([0-9a-fA-F-]{8,})\] ]] || return 0
  # sanitize UUID (trim spaces/newlines)
  local uuid="$(printf '%s' "${BASH_REMATCH[1]}" | tr -d ' \t\r\n')"

  # Action submenu
  local action
  action="$(printf "Toggle up/down\nDelete\nSet priority\nBack\n" | rofi_menu "Known: action")" || return 0
  [ -z "$action" ] && return 0
  case "$action" in
    "Toggle up/down") known_toggle_uuid "$uuid" ;;
    "Delete")         known_delete_uuid "$uuid" ;;
    "Set priority")   known_set_priority_uuid "$uuid" ;;
    *)                return 0 ;;
  esac
}

menu_status() {
  local out
  out="$(
    echo "==== Devices ===="; "$NMCLI_BIN" -c no device status
    echo; echo "==== Active Connections ===="; "$NMCLI_BIN" -c no connection show --active
    echo; echo "==== IP ===="; "$NMCLI_BIN" -f GENERAL.DEVICE,IP4.ADDRESS,IP4.GATEWAY,IP4.DNS device show | sed '/^$/d'
  )"
  rofi_menu "Status" <<<"$out" >/dev/null || true
}

# --- Main --------------------------------------------------------------------
menu_main() {
  local wifi_state="(off)"; wifi_enabled && wifi_state="(on)"
  local vpn_count;   vpn_count="$(vpn_list | wc -l | tr -d ' ')"
  local wired_count; wired_count="$(wired_status | wc -l | tr -d ' ')"
  local known_count; known_count="$(known_connections | wc -l | tr -d ' ')"
  cat <<EOF | rofi_menu "Network"
Wi-Fi $wifi_state
Wi-Fi: Scan & Connect
Wi-Fi: Disconnect
Wi-Fi: Toggle
VPN ($vpn_count)
Wired ($wired_count)
Known ($known_count)
Status
Quit
EOF
}

wifi_disconnect() {
  local dev; dev="$(wifi_device)"; [ -n "${dev:-}" ] || { notify "No Wi-Fi device"; return 0; }
  nmcli_try 5 device disconnect "$dev" >/dev/null || return 0
  notify "Wi-Fi disconnected"; exit 0
}

wifi_toggle() {
  if wifi_enabled; then nmcli_try 3 radio wifi off >/dev/null || return 0; notify "Wi-Fi disabled"
  else nmcli_try 3 radio wifi on  >/dev/null || return 0; notify "Wi-Fi enabled"; fi
  exit 0
}

main() {
  while :; do
    case "$(menu_main)" in
      "Wi-Fi (on)"|"Wi-Fi (off)"|"Wi-Fi: Scan & Connect") menu_wifi ;;
      "Wi-Fi: Disconnect")  wifi_disconnect ;;
      "Wi-Fi: Toggle")      wifi_toggle ;;
      VPN*)                 menu_vpn ;;
      Wired*)               menu_wired ;;
      Known*)               menu_known ;;
      "Status")             menu_status ;;
      ""|"Quit")            exit 0 ;;
      *)                    exit 0 ;;
    esac
  done
}

main

